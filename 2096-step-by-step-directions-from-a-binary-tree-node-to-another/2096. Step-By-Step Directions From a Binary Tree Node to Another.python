# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def backtrack_path(self,node,path_tracker):
        path = []
        while node in path_tracker:
            path.append(path_tracker[node][1])
            node = path_tracker[node][0]
        
        path.reverse()
        return "".join(path)
    
    def populate_parent_map(self,node,parent_map):
        if not node:
            return
        if node.left:
            parent_map[node.left.val] = node
            self.populate_parent_map(node.left,parent_map)
        if node.right:
            parent_map[node.right.val] = node
            self.populate_parent_map(node.right,parent_map)

    def find_start_node(self,node,start_value):
        if not node:
            return None
        if node.val == start_value:
            return node
        
        left_result =  self.find_start_node(node.left, start_value)
        if left_result:
            return left_result
        right_result = self.find_start_node(node.right,start_value)
        if right_result:
            return right_result
            

    def getDirections(self, root, startValue, destValue):
        #map to store parent nodes

        parent_map = {}

        start_node = self.find_start_node(root,startValue)
        self.populate_parent_map(root,parent_map)

        #perform bfs
        q = deque([start_node])
        visited_nodes = set()
        visited_nodes.add(start_node)

        #key:next node val: curr node and direction

        path_tracker = {}

        while q:
            curr_ele = q.popleft()
            #if dest has been seen
            if curr_ele.val == destValue:
                return self.backtrack_path(curr_ele, path_tracker)
            #check and add parent node
            if curr_ele.val in parent_map:
                parent_node = parent_map[curr_ele.val]
                if parent_node not in visited_nodes:
                    q.append(parent_node)
                    path_tracker[parent_node] = (curr_ele,"U")
                    visited_nodes.add(parent_node)
            
            #check left and add child
            if curr_ele.left and curr_ele.left not in visited_nodes:
                q.append(curr_ele.left)
                path_tracker[curr_ele.left] = (curr_ele,"L")
                visited_nodes.add(curr_ele.left)
            if curr_ele.right and curr_ele.right not in visited_nodes:
                q.append(curr_ele.right)
                path_tracker[curr_ele.right] = (curr_ele,"R")
                visited_nodes.add(curr_ele.right)
        return ""

        

        
        