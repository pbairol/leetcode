class Solution(object):
    def backtrack(self,pattern,s,mapping):
        if len(pattern) == 0 and len(s) > 0:
            return False
        
        if len(pattern) == len(s) == 0:
            return True
        
        for right in range(1,len(s) - len(pattern) + 2):
            if pattern[0] not in mapping and s[:right] not in mapping.values():
                # then add call backtrack and pop
                mapping[pattern[0]] = s[:right]
                if self.backtrack(pattern[1:],s[right:],mapping):
                    return True
                del mapping[pattern[0]]
            elif pattern[0] in mapping and mapping[pattern[0]] == s[:right]:
                #alr in the mapping then check if the rest of the pattern works
                if self.backtrack(pattern[1:], s[right:], mapping):
                    return True
        return False
    def wordPatternMatch(self, pattern, s):
        return self.backtrack(pattern,s,{})
       
        