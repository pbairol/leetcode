class Solution(object):
    def backtrack(self,arr,i,used):
        if i >= len(arr):
            return True
        for x in range(len(used)-1,0,-1):
            if (x > 1 and ( arr[i] != 0 or (i+x >= len(arr)) or arr[i+x] != 0) or used[x]  or (x == 1 and (arr[i] != 0 or used[x]))):
                    continue
            
            if x >1:
                arr[i] = x
                arr[i+x] = x
            else:
                arr[i] = x
            used[x] = True

            nextIdx= i + 1
            while nextIdx < len(arr) and arr[nextIdx]:
                nextIdx +=1

            if self.backtrack(arr,nextIdx,used):
                return True
            
            if x > 1:
                arr[i] = 0 
                arr[i+x] = 0

            else:
                arr[i] = 0 

            used[x] = False            
    def constructDistancedSequence(self, n):
        arr = [0] * (2*n-1)
        i = 0 
        used = [False] * (n+1)

        self.backtrack(arr,i,used)
        return arr



        """
        :type n: int
        :rtype: List[int]
        """
        