class Solution(object):
    def getMaximumGold(self, grid):
        DIRECTIONS = [0,1,0,-1,0]
        rows = len(grid)
        cols = len(grid[0])

        maxGold = 0
        def dfs(grid,rows,cols,row,col):
            if row < 0 or col < 0 or row == rows or col == cols or grid[row][col] == 0:
                return 0 
            
            maxGold = 0 
            #mark the val of that position and then set it to 0 so you cant go back to it 
            goldVal = grid[row][col]
            grid[row][col] = 0

            for direction in range(4):
                maxGold = max(maxGold, dfs(grid,rows,cols,DIRECTIONS[direction] + row, DIRECTIONS[direction + 1] + col))

            #back track:
            grid[row][col] = goldVal
            return maxGold + goldVal

        for row in range(rows):
            for col in range(cols):
                if grid[row][col] != 0:
                    maxGold = max(maxGold,dfs(grid,rows,cols,row,col))
            
        
        return maxGold
        