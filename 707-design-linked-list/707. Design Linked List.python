class MyLinkedList(object):

    def __init__(self):
        self.size = 0 
        self.head, self.tail = ListNode(0), ListNode(0)
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, index):
        if index < 0 or index >= self.size:
            return -1
        if index + 1 < self.size -index:
            curr = self.head
            for _ in range(index +1 ) :
                curr = curr.next
        else:
            curr = self.tail
            for _ in range(self.size-index):
                curr = curr.prev
        return curr.val
        """
        :type index: int
        :rtype: int
        """
        

    def addAtHead(self, val):
        pred = self.head
        succ = self.head.next

        self.size +=1
        newNode = ListNode(val)
        newNode.prev = pred
        newNode.next = succ
        pred.next = newNode
        succ.prev = newNode

        """
        :type val: int
        :rtype: None
        """
        

    def addAtTail(self, val):
        succ,pred = self.tail,self.tail.prev

        self.size +=1
        newNode = ListNode(val)
        newNode.prev = pred
        newNode.next = succ
        pred.next = newNode
        succ.prev = newNode
        """
        :type val: int
        :rtype: None
        """
        

    def addAtIndex(self, index, val):

        if index > self.size:
            return
        
        if index <0:
            index = 0 

        if index <self.size -index:
            pred = self.head
            for _ in range(index):
                pred = pred.next
            succ = pred.next
        
        else:
            succ = self.tail
            for _ in range(self.size-index):
                succ = succ.prev
            pred = succ.prev
        
        self.size +=1
        newNode = ListNode(val)
        newNode.prev = pred
        newNode.next = succ
        pred.next = newNode
        succ.prev = newNode
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        

    def deleteAtIndex(self, index):
        if index < 0 or index >= self.size:
            return 
        
        if index < self.size - index:
            pred = self.head
            for _ in range(index):
                pred = pred.next
            succ = pred.next.next
        else:
            succ = self.tail
            for _ in range(self.size-index-1):
                succ = succ.prev
            pred = succ.prev.prev
        
        self.size -=1
        pred.next = succ
        succ.prev = pred

        """
        :type index: int
        :rtype: None
        """
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)